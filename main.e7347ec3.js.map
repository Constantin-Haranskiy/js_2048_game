{"version":3,"sources":["scripts/main.js"],"names":["DOM_SELECTORS","GAME_FIELD","document","querySelector","ARRAY_OF_CELLS","getElementsByClassName","ARRAY_OF_ROWS","START","SCORE","MESSAGE","WIN","LOSE","FIELD_SIZE","ROWS","length","COLUMNS","SWIPE_STATES","RIGHT","LEFT","TOP","BOTTOM","BUTTONS","DOWN","UP","Game","field","some","item","value","hasEqualInRow","rows","map","row","filter","isEmpty","current","index","array","next","columns","getEmptyCells","messageWin","classList","contains","remove","className","messageLose","y","x","push","Cell","zeroField","forEach","cell","drawValue","innerHTML","score","buttonStart","messageStart","add","randomFill","refresh","emptyCeils","Math","random","cellsToFill","randomIndex","floor","randomNumber","isAdded","isSummed","splice","state","topOrBottom","rightOrBottom","direction","currentField","cells","resultRow","mergeRow","reverse","fromEnd","setField","flat","every","winCheck","win","loseCheck","lose","Array","from","elem","selectInDom","game","addEventListener","e","start","isGameOver","key","swipe"],"mappings":"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","file":"main.e7347ec3.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst DOM_SELECTORS = {\n  get GAME_FIELD() {\n    return document.querySelector('.game-field');\n  },\n  get ARRAY_OF_CELLS() {\n    return document.getElementsByClassName('field-cell');\n  },\n  get ARRAY_OF_ROWS() {\n    return document.getElementsByClassName('field-row');\n  },\n  get START() {\n    return document.querySelector('.start')\n      || document.querySelector('.restart');\n  },\n  get SCORE() {\n    return document.querySelector('.game-score');\n  },\n  MESSAGE: {\n    get START() {\n      return document.querySelector('.message-start');\n    },\n    get WIN() {\n      return document.querySelector('.message-win');\n    },\n    get LOSE() {\n      return document.querySelector('.message-lose');\n    },\n  },\n};\n\nconst FIELD_SIZE = {\n  get ROWS() {\n    return DOM_SELECTORS.ARRAY_OF_ROWS.length;\n  },\n  get COLUMNS() {\n    return DOM_SELECTORS.ARRAY_OF_CELLS.length / this.ROWS;\n  },\n};\n\nconst SWIPE_STATES = {\n  RIGHT: 'right',\n  LEFT: 'left',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n};\n\nconst BUTTONS = {\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown',\n  UP: 'ArrowUp',\n  LEFT: 'ArrowLeft',\n};\n\nclass Game {\n  constructor() {\n    this.field = [];\n  }\n\n  get isGameOver() {\n    return this.winCheck()\n      ? this.win() && true\n      : this.loseCheck()\n        ? this.lose() && true\n        : false;\n  }\n\n  winCheck() {\n    return this.field.some(item => item.value >= 2048);\n  }\n\n  loseCheck() {\n    const hasEqualInRow = this.rows\n      .map(row =>\n        row.filter(item => !item.isEmpty)\n      )\n      .some(row => row.some((current, index, array) => {\n        const next = array[index + 1];\n\n        return next && next.value === current.value;\n      }));\n\n    const hasEqualInColumn = this.columns\n      .map(row =>\n        row.filter(item => !item.isEmpty)\n      )\n      .some(row => row.some((current, index, array) => {\n        const next = array[index + 1];\n\n        return next && next.value === current.value;\n      }));\n\n    return !hasEqualInColumn && !hasEqualInRow && !this.getEmptyCells();\n  }\n\n  win() {\n    const messageWin = DOM_SELECTORS.MESSAGE.WIN;\n\n    messageWin.classList.contains('hidden')\n      && messageWin.classList.remove('hidden');\n    messageWin.className = 'message message-win';\n\n    return true;\n  }\n\n  lose() {\n    const messageLose = DOM_SELECTORS.MESSAGE.LOSE;\n\n    messageLose.classList.contains('hidden')\n      && messageLose.classList.remove('hidden');\n    messageLose.className = 'message message-lose';\n\n    return true;\n  }\n\n  zeroField() {\n    this.field = [];\n\n    for (let y = 0; y < FIELD_SIZE.ROWS; y++) {\n      for (let x = 0; x < FIELD_SIZE.COLUMNS; x++) {\n        this.field.push(new Cell({\n          x,\n          y,\n          value: 0,\n        })\n        );\n      }\n    }\n  }\n\n  setField(array) {\n    this.zeroField();\n\n    array && array.forEach((cell) => {\n      this.field[cell.index] = cell;\n    });\n  }\n\n  get columns() {\n    return Array.from({ length: 4 }, (elem, index) =>\n      this.field.filter(({ x }) => x === index)\n    );\n  }\n\n  get rows() {\n    return Array.from({ length: 4 }, (elem, index) =>\n      this.field.filter(({ y }) => y === index)\n    );\n  }\n\n  refresh() {\n    this.field.forEach(cell => {\n      cell.drawValue();\n    });\n\n    DOM_SELECTORS.SCORE.innerHTML = this.score;\n  }\n\n  start() {\n    const buttonStart = DOM_SELECTORS.START;\n    const messageStart = DOM_SELECTORS.MESSAGE.START;\n    const messageWin = DOM_SELECTORS.MESSAGE.WIN;\n    const messageLose = DOM_SELECTORS.MESSAGE.LOSE;\n\n    messageLose.className = 'message message-lose';\n\n    !messageLose.classList.contains('hidden')\n      && messageLose.classList.add('hidden');\n    messageWin.className = 'message message-win';\n\n    !messageWin.classList.contains('hidden')\n      && messageWin.classList.add('hidden');\n\n    !messageStart.classList.contains('hidden')\n      && messageStart.classList.add('hidden');\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    buttonStart.innerHTML = 'Restart';\n\n    this.field.forEach(cell =>\n      (cell.value = 0)\n    );\n    this.zeroField();\n    this.score = 0;\n\n    this.randomFill();\n    this.randomFill();\n    this.refresh();\n  }\n\n  getEmptyCells() {\n    const emptyCeils = this.field.filter(row => row.isEmpty);\n\n    return emptyCeils.length === 0\n      ? null\n      : emptyCeils;\n  }\n\n  randomNumber() {\n    return Math.random() <= 0.1\n      ? 4\n      : 2;\n  }\n\n  randomFill() {\n    const cellsToFill = this.getEmptyCells();\n\n    if (cellsToFill) {\n      const randomIndex = Math.floor(Math.random() * cellsToFill.length);\n\n      cellsToFill[randomIndex].value = this.randomNumber();\n      cellsToFill[randomIndex].isAdded = true;\n    }\n  }\n\n  mergeRow(row) {\n    return row.map((item, x, array) => {\n      const next = array[x + 1];\n      const itemEqualsNext = next && next.value === item.value;\n\n      if (itemEqualsNext) {\n        item.value *= 2;\n        item.isSummed = true;\n        this.score += item.value;\n        array.splice(x + 1, 1);\n      }\n\n      return item;\n    });\n  }\n\n  swipe(state) {\n    const topOrBottom = state === SWIPE_STATES.TOP\n      || state === SWIPE_STATES.BOTTOM;\n    const rightOrBottom = state === SWIPE_STATES.RIGHT\n      || state === SWIPE_STATES.BOTTOM;\n    const direction = topOrBottom\n      ? this.columns\n      : this.rows;\n\n    const currentField = this.field.splice(0);\n\n    const cells = direction.map((row, y) => {\n      let resultRow = row.filter(item => !item.isEmpty);\n\n      if (rightOrBottom) {\n        resultRow = this\n          .mergeRow([...resultRow].reverse())\n          .filter(item => item)\n          .reverse();\n      } else {\n        resultRow = this\n          .mergeRow(resultRow)\n          .filter(item => item);\n      }\n\n      resultRow.forEach((item, x, array) => {\n        const fromEnd = [...array].reverse()[x];\n\n        switch (state) {\n          case SWIPE_STATES.TOP :\n            item.x = y;\n            item.y = x;\n            break;\n\n          case SWIPE_STATES.BOTTOM :\n            fromEnd.x = y;\n            fromEnd.y = (FIELD_SIZE.COLUMNS - 1) - x;\n            break;\n\n          case SWIPE_STATES.LEFT :\n            item.x = x;\n            item.y = y;\n            break;\n\n          case SWIPE_STATES.RIGHT :\n            fromEnd.x = (FIELD_SIZE.ROWS - 1) - x;\n            fromEnd.y = y;\n            break;\n\n          default: break;\n        }\n      });\n\n      return resultRow;\n    });\n\n    this.setField(cells.flat());\n\n    const fieldChanged = !currentField.every((item, index, array) =>\n      item.value === this.field[index].value\n    );\n\n    if (!fieldChanged) {\n      this.refresh();\n\n      return;\n    }\n\n    this.randomFill();\n    this.refresh();\n  }\n};\n\nclass Cell {\n  constructor({ value = 0, x, y }) {\n    this.value = value;\n    this.x = x;\n    this.y = y;\n    this.isAdded = false;\n    this.isSummed = false;\n\n    this.selectInDom().className = 'field-cell';\n  };\n\n  get isEmpty() {\n    return !this.value;\n  };\n\n  get index() {\n    return this.x + FIELD_SIZE.COLUMNS * this.y;\n  }\n\n  drawValue() {\n    if (!this.isEmpty) {\n      this.isAdded && this.selectInDom().classList.add('show');\n      this.isSummed && this.selectInDom().classList.add('summed');\n      this.selectInDom().classList.add(`field-cell--${this.value}`);\n      this.selectInDom().innerHTML = this.value;\n      this.isSummed = false;\n      this.isAdded = false;\n    } else {\n      this.selectInDom().className = 'field-cell';\n      this.selectInDom().innerHTML = '';\n    }\n  };\n\n  selectInDom() {\n    return DOM_SELECTORS.ARRAY_OF_CELLS[this.index];\n  }\n};\n\nconst game = new Game();\n\nDOM_SELECTORS.START.addEventListener('click', e => {\n  game.start();\n});\n\ndocument.addEventListener('keydown', e => {\n  if (game.field.length > 0 && !game.isGameOver) {\n    switch (e.key) {\n      case BUTTONS.UP:\n        game.swipe(SWIPE_STATES.TOP);\n        break;\n\n      case BUTTONS.DOWN:\n        game.swipe(SWIPE_STATES.BOTTOM);\n        break;\n\n      case BUTTONS.LEFT:\n        game.swipe(SWIPE_STATES.LEFT);\n        break;\n\n      case BUTTONS.RIGHT:\n        game.swipe(SWIPE_STATES.RIGHT);\n        break;\n\n      default:\n        break;\n    }\n  }\n});\n"]}